// SSE_MarketData_Templates.h generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

#pragma once

#include <mfast.h>
namespace SSE_MarketData_Templates
{

class MDSnapshotFullRefresh_4001_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_4001_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_4001_cref();
    template <typename T>
    MDSnapshotFullRefresh_4001_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_4001_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDSnapshotFullRefresh_4001_cref(const mfast::message_cref& other);

    explicit MDSnapshotFullRefresh_4001_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MDStreamID() const;
    mfast::ascii_string_cref try_get_MDStreamID() const;
    mfast::ascii_string_cref get_SecurityID() const;
    mfast::ascii_string_cref try_get_SecurityID() const;
    mfast::byte_vector_cref get_Symbol() const;
    mfast::byte_vector_cref try_get_Symbol() const;
    mfast::uint64_cref get_NumTrades() const;
    mfast::uint64_cref try_get_NumTrades() const;
    mfast::uint64_cref get_TradeVolume() const;
    mfast::uint64_cref try_get_TradeVolume() const;
    mfast::decimal_cref get_TotalValueTraded() const;
    mfast::decimal_cref try_get_TotalValueTraded() const;
    mfast::decimal_cref get_PrevClosePx() const;
    mfast::decimal_cref try_get_PrevClosePx() const;
    mfast::decimal_cref get_PrevSetPx() const;
    mfast::decimal_cref try_get_PrevSetPx() const;
    mfast::uint64_cref get_TotalLongPosition() const;
    mfast::uint64_cref try_get_TotalLongPosition() const;

    class MDFullGrp_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDFullGrp_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDFullGrp_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::uint64_cref get_MDEntrySize() const;
        mfast::uint64_cref try_get_MDEntrySize() const;
        mfast::ascii_string_cref get_MDEntryTime() const;
        mfast::ascii_string_cref try_get_MDEntryTime() const;
        mfast::uint32_cref get_MDEntryPositionNo() const;
        mfast::uint32_cref try_get_MDEntryPositionNo() const;
    };

    typedef mfast::make_sequence_cref<MDFullGrp_element_cref> MDFullGrp_cref;
    MDFullGrp_cref get_MDFullGrp() const;
    MDFullGrp_cref try_get_MDFullGrp() const;
    mfast::ascii_string_cref get_TradingPhaseCode() const;
    mfast::ascii_string_cref try_get_TradingPhaseCode() const;

};


typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_4001_cref> MDSnapshotFullRefresh_4001_mref_base;
class MDSnapshotFullRefresh_4001_mref
  : public MDSnapshotFullRefresh_4001_mref_base
{
  typedef MDSnapshotFullRefresh_4001_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_4001_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDSnapshotFullRefresh_4001_mref();
    template <typename T>
    MDSnapshotFullRefresh_4001_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDSnapshotFullRefresh_4001_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDSnapshotFullRefresh_4001_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDSnapshotFullRefresh_4001_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_mref set_MDStreamID() const;
    mfast::ascii_string_mref set_SecurityID() const;
    mfast::byte_vector_mref set_Symbol() const;
    void omit_Symbol() const;
    mfast::uint64_mref set_NumTrades() const;
    void omit_NumTrades() const;
    mfast::uint64_mref set_TradeVolume() const;
    void omit_TradeVolume() const;
    mfast::decimal_mref set_TotalValueTraded() const;
    void omit_TotalValueTraded() const;
    mfast::decimal_mref set_PrevClosePx() const;
    void omit_PrevClosePx() const;
    mfast::decimal_mref set_PrevSetPx() const;
    void omit_PrevSetPx() const;
    mfast::uint64_mref set_TotalLongPosition() const;
    void omit_TotalLongPosition() const;

    class MDFullGrp_element_mref
      : public mfast::make_aggregate_mref<MDSnapshotFullRefresh_4001_cref::MDFullGrp_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDSnapshotFullRefresh_4001_cref::MDFullGrp_element_cref> base_type;
      public:
        MDFullGrp_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::decimal_mref set_MDEntryPx() const;
        void omit_MDEntryPx() const;
        mfast::uint64_mref set_MDEntrySize() const;
        void omit_MDEntrySize() const;
        mfast::ascii_string_mref set_MDEntryTime() const;
        void omit_MDEntryTime() const;
        mfast::uint32_mref set_MDEntryPositionNo() const;
        void omit_MDEntryPositionNo() const;
    };

    typedef mfast::make_sequence_mref<MDFullGrp_element_mref> MDFullGrp_mref;
    MDFullGrp_mref set_MDFullGrp() const;
    mfast::ascii_string_mref set_TradingPhaseCode() const;
    void omit_TradingPhaseCode() const;
};

class MDSnapshotFullRefresh_4001
  : private mfast::value_storage_array<11>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 4001
    };
    typedef mfast::template_instruction_ex<MDSnapshotFullRefresh_4001_cref> instruction_type;

    typedef mfast::make_message_cref<MDSnapshotFullRefresh_4001_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDSnapshotFullRefresh_4001_mref, instruction_type> mref_type;
    MDSnapshotFullRefresh_4001(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDSnapshotFullRefresh_4001(
      const MDSnapshotFullRefresh_4001_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDSnapshotFullRefresh_4001(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDSnapshotFullRefresh_4001(const MDSnapshotFullRefresh_4001&);
    MDSnapshotFullRefresh_4001& operator = (const MDSnapshotFullRefresh_4001&);
};


struct  templates_description
  : mfast::templates_description
{
  typedef std::tuple<MDSnapshotFullRefresh_4001> types;
  templates_description();
  static const templates_description* instance();
};

inline const templates_description* description()
{
  return templates_description::instance();
}

#include "SSE_MarketData_Templates.inl"
}
